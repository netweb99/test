{"entries":[{"timestamp":1734514598865,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"nfEwu^wh$xU)V8DT$}1L\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"0QMA9F`bLMh0h~QF$~|A\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function on_forever() {\n    \n})"],[0,"\n"]],"start1":0,"start2":0,"length1":46,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"main.py\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":215,"start2":215,"length1":108,"length2":44}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.py","value":"\n# -*- coding: utf-8 -*-\n\nimport serial\n\nclass Vedirect:\n\n    def __init__(self, serialport, timeout):\n        self.serialport = serialport\n        self.ser = serial.Serial(serialport, 19200, timeout=timeout)\n        self.header1 = ('\\r')\n        self.header2 = ('\\n')\n        self.hexmarker = (':')\n        self.delimiter = ('\\t')\n        self.key = ''\n        self.value = ''\n        self.bytes_sum = 0;\n        self.state = self.WAIT_HEADER\n        self.dict = {}\n\n\n    (HEX, WAIT_HEADER, IN_KEY, IN_VALUE, IN_CHECKSUM) = range(5)\n\n    def input(self, byte):\n        if byte == self.hexmarker and self.state != self.IN_CHECKSUM:\n            self.state = self.HEX\n            \n        \n        if self.state == self.WAIT_HEADER:\n            self.bytes_sum += byte\n            if byte == self.header1:\n                self.state = self.WAIT_HEADER\n            elif byte == self.header2:\n                self.state = self.IN_KEY\n\n            return None\n        elif self.state == self.IN_KEY:\n            self.bytes_sum += byte\n            if byte == self.delimiter:\n                if (self.key == 'Checksum'):\n                    self.state = self.IN_CHECKSUM\n                else:\n                    self.state = self.IN_VALUE\n            else:\n                self.key += chr(byte)\n            return None\n        elif self.state == self.IN_VALUE:\n            self.bytes_sum += byte\n            if byte == self.header1:\n                self.state = self.WAIT_HEADER\n                self.dict[self.key] = self.value;\n                self.key = '';\n                self.value = '';\n            else:\n                self.value += chr(byte)\n            return None\n        elif self.state == self.IN_CHECKSUM:\n            self.bytes_sum += byte\n            self.key = ''\n            self.value = ''\n            self.state = self.WAIT_HEADER\n            if (self.bytes_sum % 256 == 0):\n                self.bytes_sum = 0\n                return self.dict\n            else:\n                self.bytes_sum = 0\n        elif self.state == self.HEX:\n            self.bytes_sum = 0\n            if byte == self.header2:\n                self.state = self.WAIT_HEADER\n        else:\n            raise AssertionError()\n\n    def read_data_single(self):\n        while True:\n            data = self.ser.read()\n            for single_byte in data:\n                packet = self.input(single_byte)\n                if (packet != None):\n                    return packet\n            \n\n    def read_data_callback(self, callbackFunction):\n        while True:\n            data = self.ser.read()\n            for byte in data:\n                packet = self.input(byte)\n                if (packet != None):\n                    callbackFunction(packet)\n\n\n\n\n    \n"}]}],"snapshots":[{"timestamp":1734514598864,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"TEST\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1734515003873}